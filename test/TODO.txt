TODOS:

Implement inserting cost proportional to number of execution

Enob propagation (WIP, external and math calls not handled) [external->force original type, if we know the cost we can optimize for the cost]

Add forced cast to original type if in general the function to call is not known

Implement SELECT instruction


TESTING:
Handling correctly storing costants/phi of costants in enob
MemSSA should be used in propagation of enob against load/store
Implement phi node (should be ok)
Implement call (there are some problem because of the VRA)
Implement the cost of function in terms o energy/time
Fix execution of function from root (does not use correct function now)
Actually use the model result and propagate to conversion (Should work but still to even run corner test cases...)
Handle pointers (WIP) (OUCH, should work but it is still to be tested very much, moreover, what happens when more than a variable is inserted? General pointers are still not handled)


DONE:
Refactoring of inserting value info
Implement loading costs from file
Really solve the model, and then re-associate the selected variables
Insert parameter to tune between computation time reduction and precision