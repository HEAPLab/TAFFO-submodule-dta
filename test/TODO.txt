TODOS:

Implement inserting cost proportional to number of execution

When storing a non converted value to a converted one, a cast is needed. Indeed there should be a conversion cost.
What if a conversion disabled is used in a computation that is not disabled? As for now it is skipped.

Enob propagation (WIP, known math functions calls not handled)

Avoid error in empty models (this should not even happen...)

Disable execution on disabled instructions

Handle global pointers!!! -> WIP, handled in a general and ugly way. For now, only define a new variable until a store happens!
Handle pointers (WIP) (OUCH, should work but it is still to be tested very much, moreover, what happens when more than a variable is inserted? General pointers are still not handled)


When computing a function call from root, parse arguments info!

Obiettivo: sviluppare due (o pi√π) policy per i seguenti use case:
- ottimizza i data type, partendo da "tutto double" e inserendo 0 errore
- ottimizza i data type, partendo da "tutto double" e utilizza solo bfloat16 e IEEE binary32
- ottimizza i data type, partendo da "tutto double" e ammetti al massimo epsilon errore
- run Forest, run! rendilo storpio ma veloce, vediamo se inciampa e crasha


TESTING:
Group costs per category
Implement SELECT instruction
Add forced cast to original type if in general the function to call is not known
Handling correctly storing costants/phi of costants in enob
MemSSA should be used in propagation of enob against load/store
Implement phi node (should be ok)
Implement call (there are some problem because of the VRA)
Implement the cost of function in terms o energy/time
Fix execution of function from root (does not use correct function now)
Actually use the model result and propagate to conversion (Should work but still to even run corner test cases...)


DONE:
Refactoring of inserting value info
Implement loading costs from file
Really solve the model, and then re-associate the selected variables
Insert parameter to tune between computation time reduction and precision